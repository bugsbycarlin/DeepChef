
import os

from markov import *

title_generator = Markov()
blurb_generator = Markov()
ingredients_generator = Markov()
directions_generator = Markov(3)
directions_pool = []

for filename in os.listdir("../Training"):
  with open("../Training/" + filename, "r") as training_file:
    if "titles_" in filename and filename.index("titles_") == 0:
      titles = [item.strip() for item in training_file.readlines() if item.strip()]
      for title in titles:
        title_generator.train(title)
      continue

    if "ingredients_" in filename and filename.index("ingredients_") == 0:
      ingredients = [item.strip() for item in training_file.readlines() if item.strip()]
      for ingredient in ingredients:
        ingredients_generator.train(ingredient)
        directions_generator.train(ingredient)
      continue

    if "directions_" in filename and filename.index("directions_") == 0:
      directions = [item.strip() for item in training_file.readlines() if item.strip()]
      for direction in directions:
        directions_generator.train(direction)
      continue

    stuff = [item.strip() for item in training_file.read().split("-----")]
    
    title = re.sub('[^a-zA-Z ]+', '', stuff[0])
    if title:
      title_generator.train(title)

    if len(stuff) > 1:
      blurb = stuff[1]
      if blurb:
        blurb_generator.train(blurb)

    if len(stuff) > 2:
      ingredients = stuff[2].split("\n---\n")
      for ingredient in ingredients:
        if ingredient:
          ingredients_generator.train(ingredient)
          directions_generator.train(ingredient)

    if len(stuff) > 3:
      directions = stuff[3].split("\n---\n")
      for direction in directions:
        if direction:
          directions_generator.train(ingredient)
          direction_fragments = direction.split(".")
          directions_pool.append(direction)

title_generator.clean()
blurb_generator.clean()
ingredients_generator.clean()
directions_generator.clean()

def generate_recipe():
  # Here we go
  print
  print
  print
  print "This recipe generated by DeepChef, 2017"
  print
  print
  print title_generator.generate(2, False, False)
  print "About:"
  print blurb_generator.generate(10, False, True)
  print
  print "Ingredients:"
  for i in range(0, random.randint(3,10)):
    ingredient = ingredients_generator.generate(3,True, False)
    for i in range(0,3):
      ingredient = re.sub('([0-9]+) ([0-9]+)', r'\1'+r'\2', ingredient)
    if len(ingredient) > 5:
      print ingredient
  print
  print "Directions:"
  for i in range(0, random.randint(2,7)):
    print str(i) + ". " + directions_generator.generate(15).replace("  "," ")
    #print str(i + 1) + ". " + random.choice(directions_pool)
    print
  print
  print
  print
  print

def generate_recipe_html():
  # Here we go
  print "Content-type: text/html\n\n"
  print "<html>"
  print "<br/>"
  print "<br/>"
  print "<br/>"
  print "<br/>"
  print "<br/>"
  print "<b>" + title_generator.generate(2, False, False) + "</b><br/><br/>"
  print "About:<br/>"
  print blurb_generator.generate(10, False, True) + "<br/>"
  print "<br/>"
  print "Ingredients:<br/>"
  for i in range(0, random.randint(3,10)):
    ingredient = ingredients_generator.generate(3,True, False)
    for i in range(0,3):
      ingredient = re.sub('([0-9]+) ([0-9]+)', r'\1'+r'\2', ingredient)
    if len(ingredient) > 5:
      print ingredient + "<br/>"
  print "<br/>"
  print "Directions:<br/>"
  for i in range(0, random.randint(2,7)):
    print str(i + 1) + ". " + directions_generator.generate(15).replace("  "," ") + "<br/>"
    #print str(i + 1) + ". " + random.choice(directions_pool)
    print "<br/>"
  print "<br/>"
  print "<br/>"
  print "<br/>"
  print "<br/>"
  print "This recipe generated by DeepChef, 2017"
  print "</html>"


#print title_generator.dictionary

# for i in range(0,30):
#   print title_generator.generate()

# print len(title_generator.dictionary)
# print len(blurb_generator.dictionary)
# print len(ingredients_generator.dictionary)
# print len(directions_generator.dictionary)

#print title_generator.dictionary
# for word in title_generator.dictionary:
#   if len(word) > 20:
#     print word

# for word in ingredients_generator.first_words:
#   print word + ": " + str(ingredients_generator.first_words[word])

#generate_recipe_html()
#generate_recipe()
